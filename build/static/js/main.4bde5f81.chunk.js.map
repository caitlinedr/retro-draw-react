{"version":3,"sources":["components/Header.js","components/Cell.js","utils/index.js","components/Palette.js","components/Grid.js","components/ActionPanel.js","components/App.js","index.js"],"names":["Header","className","Cell","props","color","isActive","handleClick","classValue","style","backgroundColor","onClick","COLORS","buildCellList","cellList","i","push","Palette","activeColor","setActiveColor","map","index","key","Grid","setCellList","cell","newCellList","ActionPanel","forEach","App","useState","_setCellList","localStorage","setItem","JSON","stringify","setCellListOnLocal","useEffect","parse","getItem","getCellListFromLocal","ReactDOM","render","document","getElementById"],"mappings":"6KAYeA,EANA,WACb,OAAO,4BAAQC,UAAU,UACvB,4CCgCWC,EA5BF,SAACC,GAEZ,IAAMC,EAAQD,EAAMC,MACdC,EAAWF,EAAME,SACjBC,EAAcH,EAAMG,YAEtBC,GAAa,EAejB,OAbIA,EADEF,EACY,cAED,OAWV,yBACLJ,UAAWM,EACXC,MAAO,CAACC,gBAAiBL,GACzBM,QAASJ,KChCAK,EAAS,CACpB,MACA,SACA,SACA,QACA,OACA,SACA,QACA,SAOK,SAASC,IAGd,IAFA,IAAMC,EAAW,GAERC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAASE,KAAK,CACZX,MAAO,OAIX,OAAOS,ECjBT,IA8BeG,EA9BC,SAACb,GAIf,IAAMc,EAAcd,EAAMc,YACpBC,EAAiBf,EAAMe,eAY7B,OAAO,yBAAKjB,UAAU,WAElBU,EAAOQ,KAAI,SAACf,EAAOgB,GACjB,OAAO,kBAAC,EAAD,CACLC,IAAK,WAAaD,EAClBhB,MAAOA,EACPC,SAAYY,IAAgBb,EAC5BE,YAAa,kBAAMY,EAAed,W,OCW7BkB,EArCF,SAACnB,GAKZ,IAAMc,EAAcd,EAAMc,YACpBJ,EAAWV,EAAMU,SACjBU,EAAcpB,EAAMoB,YAa1B,OAAO,yBAAKtB,UAAU,QAElBY,EAASM,KAAI,SAACK,EAAMJ,GAClB,OAAO,kBAAC,EAAD,CACLC,IAAKD,EACLhB,MAAOoB,EAAKpB,MACZE,YAAa,WACX,IAAMmB,EAAW,YAAOZ,GACxBY,EAAYL,GAAOhB,MAAQa,EAC3BM,EAAYE,WCsBTC,EAnDK,SAACvB,GAKnB,IAAMc,EAAcd,EAAMc,YACpBJ,EAAWV,EAAMU,SACjBU,EAAcpB,EAAMoB,YAE1B,OAAO,yBAAKtB,UAAU,gBAMpB,4BAAQS,QAAS,WACf,IAAMe,EAAcb,IACpBW,EAAYE,KAFd,aAUA,4BAAQf,QAAS,WACf,IAAMe,EAAcb,IACpBa,EAAYE,SAAQ,SAACH,GAAD,OAAUA,EAAKpB,MAAQa,KAC3CM,EAAYE,KAHd,YAYA,4BAAQf,QAAS,WACf,IAAMe,EAAcb,IACpBC,EAASc,SAAQ,SAACH,EAAMJ,GAClBI,EAAKpB,MACPqB,EAAYL,GAAOhB,MAAQoB,EAAKpB,MAEhCqB,EAAYL,GAAOhB,MAAQa,KAG/BM,EAAYE,KATd,gBCwBWG,EA9BH,WAQV,MAAsCC,mBAASlB,EAAO,IAAtD,mBAAOM,EAAP,KAAoBC,EAApB,KACA,EAAiCW,mBAAS,IAA1C,mBAAOhB,EAAP,KAAiBiB,EAAjB,KAEA,SAASP,EAAYE,IApBI,SAACZ,GAC1BkB,aAAaC,QAAQ,WAAYC,KAAKC,UAAUrB,IAoB9CsB,CAAmBV,GACnBK,EAAaL,GAKf,OAFAW,qBAAU,kBAAMN,EAnCW,WAC3B,IAAIjB,EAAWoB,KAAKI,MAAMN,aAAaO,QAAQ,aAE/C,OAAIzB,GAIGD,IA4BsB2B,MAAyB,IAE/C,yBAAKtC,UAAU,OAEpB,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAASgB,YAAaA,EAAaC,eAAgBA,IAEnD,kBAAC,EAAD,CAAMD,YAAaA,EAAaJ,SAAUA,EAAUU,YAAaA,IAEjE,kBAAC,EAAD,CAAaN,YAAaA,EAAaJ,SAAUA,EAAUU,YAAaA,MC7D5EiB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,S","file":"static/js/main.4bde5f81.chunk.js","sourcesContent":["import React from 'react';\n\n/**\n * The Header is simply the main heading of the application,\n * no props... just a static file.\n */\nconst Header = () => {\n  return <header className=\"header\">\n    <h1>Retro Draw</h1>\n  </header>\n}\n\nexport default Header;","import React from 'react';\n\n/**\n * The Cell component represents the fundamental \"clickable object\" in\n * retro-draw, there will be <Cell /> in both Palette and Grid.\n * \n * Props passed in will include:\n * - color, which is the background color of the cell\n * - isActive, which will be set only on cells in the Palette\n * - handleClick, which will be a function to run when the cell has been clicked on \n */\n\nconst Cell = (props) => {\n  /* Create constants for color, isActive, and handleClick, reading the value off of props */\n  const color = props.color\n  const isActive = props.isActive\n  const handleClick = props.handleClick\n\n  let classValue = false\n    if (isActive) {\n      classValue =  'cell active'\n    } else {\n      classValue = 'cell'\n    }\n  /**\n   * For the template you need to\n   * - set the className to be \"cell active\" if the value of isActive\n   *    is true\n   * - set the style property on the div to have backgroundColor equal to the \n   *    color string passed in with the props\n   * - set the onClick property to be equal to the handleClick function\n   *    passed in with the props\n   */\n  return <div \n    className={classValue}\n    style={{backgroundColor: color}} \n    onClick={handleClick}>\n    </div>\n}\n\nexport default Cell;","/**\n * COLORS should be an array of color strings,\n * approximately 8 of them.\n */\nexport const COLORS = [\n  'red',\n  'orange',\n  'yellow',\n  'green',\n  'blue',\n  'purple',\n  'white',\n  'black'\n];\n\n/**\n * buildCellList creates and returns an \n * array of empty cell objects\n */\nexport function buildCellList() {\n  const cellList = [];\n\n  for (let i = 0; i < 64; i++) {\n    cellList.push({\n      color: null\n    });\n  }\n\n  return cellList;\n}","import React from 'react';\nimport Cell from './Cell';\n\n/* Need to map over the COLORS array, so we pull them from ../utils */\nimport { COLORS } from '../utils';\n\n/**\n * The Palette component represents the interface for displaying\n * clickable color cells, and needs to communicate the activeColor\n * to other components. \n */\nconst Palette = (props) => {\n  /**\n   * Create constants for activeColor and setActiveColor, reading the value off of the props\n   */\n  const activeColor = props.activeColor\n  const setActiveColor = props.setActiveColor\n\n  /**\n   * For the template, you need to:\n   * - map over COLORS\n   * - return from the mapping function a <Cell /> which:\n   *    - has a unique key (you can use 'palette-' and the index of the color)\n   *    - has a prop of color equal to the color from the map\n   *    - has a prop of isActive equal to true if activeColor equals the color from the map\n   *    - has a prop of handleClick which is a function that calls setActiveColor, passing it \n   *      the color from the map\n   */\n  return <div className=\"palette\">\n    {\n      COLORS.map((color, index) => {\n        return <Cell \n          key={'palette-' + index}\n          color={color} \n          isActive = {activeColor === color ? true : false}\n          handleClick={() => setActiveColor(color)} />\n      })\n    }\n  </div>\n}\n\nexport default Palette;","import React from 'react';\nimport Cell from './Cell';\n\n\n/**\n * The Grid component represents the interface for displaying clickable\n * color cells, and needs to update the color of a clicked cell from the\n * activeColor when a user clicks on it.\n */\nconst Grid = (props) => {\n  /**\n   * Create constants for activeColor, cellList, and setCellList, reading the value off of the props\n   */\n\n  const activeColor = props.activeColor\n  const cellList = props.cellList\n  const setCellList = props.setCellList\n\n  /**\n   * For the template you need to:\n   * - map over the cellList\n   * - return from the mapping function a <Cell /> which:\n   *    - has a unique key (you can use 'grid-' and the index of the cell)\n   *    - has a prop of color equal to value of color on the cell from the map\n   *    - has a prop of handleClick which is a function that:\n   *        - makes a copy of the current cellList\n   *        - updates the color of the clicked cell to the activeColor (the index from the map function is useful here)\n   *        - calls setCellList, passing in the updated copy\n   */\n  return <div className=\"grid\">\n    {\n      cellList.map((cell, index) => {\n        return <Cell \n          key={index}\n          color={cell.color}\n          handleClick={() => {\n            const newCellList = [...cellList]\n            newCellList[index].color = activeColor\n            setCellList(newCellList)\n          }}\n        />\n      })\n    }\n  </div>\n}\n\nexport default Grid;","import React from 'react';\n\n/* Need to build a blank cell list when user clicks CLEAR ALL */\nimport { buildCellList } from '../utils';\n\n/**\n * The ActionPanel component represents the interface for updating the Grid\n * based on any number of buttons the user might click on.\n */\nconst ActionPanel = (props) => {\n  /**\n   * Create constants for activeColor, cellList, and setCellList, reading them from the props\n   */\n\n  const activeColor = props.activeColor\n  const cellList = props.cellList\n  const setCellList = props.setCellList\n\n  return <div className=\"action-panel\">\n    {/* \n      This button needs an onClick function which:\n        - creates a new cell list using buildCellList\n        - passes the new cell list to setCellList\n    */}\n    <button onClick={() => {\n      const newCellList = buildCellList()\n      setCellList(newCellList)   \n    }}>clear all</button>\n    {/* \n      This button needs an onClick function which:\n        - creates a new cell list using buildCellList\n        - loops over it, setting the color on each cell to activeColor\n        - passes the new cell list to setCellList\n    */}\n    <button onClick={() => {\n      const newCellList = buildCellList()\n      newCellList.forEach((cell) => cell.color = activeColor)\n      setCellList(newCellList)\n    }}>fill all</button>\n    {/* \n      This button needs an onClick function which:\n        - creates a new cell list using buildCellList\n        - loops over the original cellList, and for each cell in it:\n          - set the corresponding (by index) new cell to its color (if it has one) OR\n          - set the corresponding (by index) new cell to the activeColor\n    */}\n    <button onClick={() => {\n      const newCellList = buildCellList()\n      cellList.forEach((cell, index) => {\n        if (cell.color) {\n          newCellList[index].color = cell.color\n        } else {\n          newCellList[index].color = activeColor\n        }\n      })\n      setCellList(newCellList)\n    }}>fill empty</button>\n  </div>\n}\n\nexport default ActionPanel;","import React, { useEffect, useState } from 'react';\n\n/**\n * The main application uses these four components\n */\nimport Header from './Header';\nimport Palette from './Palette';\nimport Grid from './Grid';\nimport ActionPanel from './ActionPanel';\n\n/**\n * We need access to COLORS and buildCellList for our initial\n * state objects\n */\nimport {\n  COLORS,\n  buildCellList\n} from '../utils';\n\n// BONUS\n\nconst getCellListFromLocal = () => {\n  let cellList = JSON.parse(localStorage.getItem('cellList'));\n\n  if (cellList) {\n    return cellList;\n  }\n\n  return buildCellList();\n}\n\nconst setCellListOnLocal = (cellList) => {\n  localStorage.setItem('cellList', JSON.stringify(cellList));\n}\n\n/**\n * The App component represents our entire application. It contains all of the\n * top level components, and is responsible for helping its children communicate \n * with each other via state objects, and state functions.\n */\nconst App = () => {\n  /**\n   * Using useState you need to create:\n   * \n   * - activeColor, setActiveColor initialized to COLORS[0]\n   * - cellList, setCellList initialized to buildCellList()\n   */\n\n  const [activeColor, setActiveColor] = useState(COLORS[0])\n  const [cellList, _setCellList] = useState([])\n\n  function setCellList(newCellList) {\n    setCellListOnLocal(newCellList)\n    _setCellList(newCellList)\n  }\n\n  useEffect(() => _setCellList(getCellListFromLocal()), [])\n\n  return <div className=\"app\">\n    {/* Header needs no props */}\n    <Header />\n    {/* Palette needs to be passed activeColor and setActiveColor */}\n    <Palette activeColor={activeColor} setActiveColor={setActiveColor}/>\n    {/* Grid needs to be passed activeColor, cellList, and setCellList */}\n    <Grid activeColor={activeColor} cellList={cellList} setCellList={setCellList}/>\n    {/* ActionPanel needs to be passed activeColor, cellList, and setCellList */}\n    <ActionPanel activeColor={activeColor} cellList={cellList} setCellList={setCellList}/>\n  </div>\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app')\n)"],"sourceRoot":""}